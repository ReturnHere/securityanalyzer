<android.accessibilityservice.AccessibilityService: void clearWallpaper()>
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)>
<android.accessibilityservice.AccessibilityService: void setWallpaper(java.io.InputStream)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()>
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)>
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.app.ActivityGroup: void clearWallpaper()>
<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)>
<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void restartPackage(java.lang.String)>
<android.app.Activity: void clearWallpaper()>
<android.app.Activity: void setWallpaper(android.graphics.Bitmap)>
<android.app.Activity: void setWallpaper(java.io.InputStream)>
<android.app.AlarmManager: void setTime(long)>
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
<android.app.AliasActivity: void clearWallpaper()>
<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)>
<android.app.AliasActivity: void setWallpaper(java.io.InputStream)>
<android.app.Application: void clearWallpaper()>
<android.app.Application: void setWallpaper(android.graphics.Bitmap)>
<android.app.Application: void setWallpaper(java.io.InputStream)>
<android.app.backup.BackupAgentHelper: void clearWallpaper()>
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)>
<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)>
<android.app.backup.BackupAgent: void clearWallpaper()>
<android.app.backup.BackupAgent: void setWallpaper(android.graphics.Bitmap)>
<android.app.backup.BackupAgent: void setWallpaper(java.io.InputStream)>
<android.app.ExpandableListActivity: void clearWallpaper()>
<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)>
<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)>
<android.app.IntentService: void clearWallpaper()>
<android.app.IntentService: void setWallpaper(android.graphics.Bitmap)>
<android.app.IntentService: void setWallpaper(java.io.InputStream)>
<android.app.ListActivity: void clearWallpaper()>
<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)>
<android.app.ListActivity: void setWallpaper(java.io.InputStream)>
<android.app.Service: void clearWallpaper()>
<android.app.Service: void setWallpaper(android.graphics.Bitmap)>
<android.app.Service: void setWallpaper(java.io.InputStream)>
<android.app.TabActivity: void clearWallpaper()>
<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)>
<android.app.TabActivity: void setWallpaper(java.io.InputStream)>
<android.app.WallpaperManager: void clear()>
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
<android.app.WallpaperManager: void setResource(int)>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.Context: void clearWallpaper()>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.content.MutableContextWrapper: void clearWallpaper()>
<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)>
<android.hardware.Camera: android.hardware.Camera open()>
<android.inputmethodservice.AbstractInputMethodService: void clearWallpaper()>
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(android.graphics.Bitmap)>
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(java.io.InputStream)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: void setMode(int)>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager$MulticastLock: void acquire()>
<android.net.wifi.WifiManager$MulticastLock: void finalize()>
<android.net.wifi.WifiManager$MulticastLock: void release()>
<android.os.PowerManager: void goToSleep(long)>
<android.os.PowerManager: void reboot(java.lang.String)>
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>
<android.service.wallpaper.WallpaperService: void clearWallpaper()>
<android.service.wallpaper.WallpaperService: void setWallpaper(android.graphics.Bitmap)>
<android.service.wallpaper.WallpaperService: void setWallpaper(java.io.InputStream)>
<android.speech.RecognitionService: void clearWallpaper()>
<android.speech.RecognitionService: void setWallpaper(android.graphics.Bitmap)>
<android.speech.RecognitionService: void setWallpaper(java.io.InputStream)>
<android.speech.SpeechRecognizer: void cancel()>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.speech.SpeechRecognizer: void stopListening()>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.content.pm.PackageManager: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)>
